import express from "express";
import usersController from "../controllers/usersController.js";
import rateLimitMiddleware from "../middlewares/rateLimitMiddleware.js";
import validationMiddleware from "../middlewares/validationMiddleware.js";

const router = express.Router();

router.get(
  "/users",
  validationMiddleware.tokenRequired,
  validationMiddleware.administrationRequired,
  usersController.getAllUsers
);
router.get(
  "/users/activity",
  validationMiddleware.tokenRequired,
  validationMiddleware.administrationRequired,
  usersController.getUsersActivity
);
router.get(
  "/users/reports",
  validationMiddleware.tokenRequired,
  validationMiddleware.administrationRequired,
  usersController.getAllUsersReports
);
router.get(
  "/users/sessions/:userId",
  validationMiddleware.tokenRequired,
  usersController.checkUserSession
);
router.post(
  "/users/get_new_password",
  rateLimitMiddleware.limiter,
  validationMiddleware.emailRequired,
  validationMiddleware.emailShouldExist,
  usersController.getNewPassword
);
router.post(
  "/users/reset_password",
  rateLimitMiddleware.limiter,
  validationMiddleware.emailRequired,
  validationMiddleware.emailShouldExist,
  validationMiddleware.passwordRequired,
  validationMiddleware.hashRequired,
  validationMiddleware.passwordShouldMatch,
  usersController.resetPassword
);
router.get(
  "/users/:userId",
  validationMiddleware.tokenRequired,
  validationMiddleware.administrationOrAuthenticationRequired,
  validationMiddleware.userShouldExistById,
  usersController.getUser
);
router.put(
  "/users/:userId/edit",
  validationMiddleware.tokenRequired,
  validationMiddleware.administrationOrAuthenticationRequired,
  usersController.updateUser
);
router.get(
  "/users/:userId/reports",
  validationMiddleware.tokenRequired,
  validationMiddleware.tokenShouldBeValid,
  validationMiddleware.administrationOrAuthenticationRequired,
  validationMiddleware.userShouldExistById,
  usersController.getUserReports
);
router.get(
  "/users/reports/:reportId",
  validationMiddleware.tokenRequired,
  validationMiddleware.tokenShouldBeValid,
  validationMiddleware.administrationOrAuthenticationRequired,
  usersController.getReport
);
router.post(
  "/users/reports/add",
  validationMiddleware.tokenRequired,
  validationMiddleware.tokenShouldBeValid,
  validationMiddleware.administrationOrAuthenticationRequired,
  usersController.createReport
);
router.delete(
  "/users/reports/delete/:reportId",
  validationMiddleware.tokenRequired,
  validationMiddleware.administrationOrAuthenticationRequired,
  validationMiddleware.notOwnershipRequired,
  usersController.deleteReport
);
router.get(
  "/users/:userId/contributions",
  validationMiddleware.tokenRequired,
  validationMiddleware.tokenShouldBeValid,
  validationMiddleware.administrationOrAuthenticationRequired,
  validationMiddleware.userShouldExistById,
  usersController.getUserContributions
);
router.get(
  "/users/:userId/favorites",
  validationMiddleware.tokenRequired,
  validationMiddleware.tokenShouldBeValid,
  validationMiddleware.administrationOrAuthenticationRequired,
  validationMiddleware.userShouldExistById,
  usersController.getFavorites
);
router.get(
  "/users/:userId/saved",
  validationMiddleware.tokenRequired,
  validationMiddleware.tokenShouldBeValid,
  validationMiddleware.administrationOrAuthenticationRequired,
  validationMiddleware.userShouldExistById,
  usersController.getSaved
);
router.post(
  "/users/:userId/verify",
  validationMiddleware.tokenRequired,
  validationMiddleware.idsFromTokenAndParamsShouldMatch,
  validationMiddleware.userShouldExistById,
  usersController.verifyUser
);
router.post(
  "/users/register",
  validationMiddleware.emailShouldNotExist,
  usersController.createUser
);
router.post(
  "/users/login",
  rateLimitMiddleware.limiter,
  validationMiddleware.emailRequired,
  validationMiddleware.passwordRequired,
  validationMiddleware.emailShouldExist,
  validationMiddleware.userShouldExistByEmail,
  validationMiddleware.passwordShouldMatch,
  usersController.loginUser
);
router.delete(
  "/users/:userId/delete",
  validationMiddleware.tokenRequired,
  validationMiddleware.administrationOrAuthenticationRequired,
  validationMiddleware.notOwnershipRequired,
  usersController.deleteUser
);

export default router;
